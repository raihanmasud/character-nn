import java.applet.*;
import java.awt.*;

import java.awt.*;

class MenuWindow extends Frame { 
	boolean inAnApplet = true;
	Graphics g;
	int last_x;
	int last_y;
	int drawing [][];
	
		//public MenuWindow() {

        //This constructor implicitly calls the Frame no-argument 
        //constructor and then adds components to the window.    
		//}

  int i,j,k;
  int pointX,pointY,pickX=-1,pickY=-1;
  int nodeStart[]={0,35,43};
  int numNodes[]={35,8,26};
  int numLayers=3;
  
  /*
  double weights[][]={{  
  
-0.24090,-1.23843, 0.41136,-3.10189, 1.13887,  // weights between input nodes #35..#1 and hidden node #1(node #36) 
1.50856,-0.73513, 0.29602,-0.79364, 0.4375, 
1.24289,-3.14031, 3.32324, 0.41833, 0.74623,
-2.14632, 9.24753, 6.01920, 3.90679,-2.00471,
-3.71680, 2.45119, 2.51333,-0.33595,-2.46390,
-2.35510, 5.44053, 1.74311, 3.73310, 2.85534,
-1.17203, 1.62951,-3.10261,-0.50913,-3.53991},
  {
-2.35146,1.95872, 0.80291,-1.57286,-2.76121,  // weights between input nodes #35..#1 and hidden node #2(node #37) /
-4.25709,1.46727,-0.68113, 0.36874, 0.81507,
-5.43324,-3.32372,2.24215,-2.52712,-2.48469,
-7.25892, 0.32777, 2.09091,3.84613,-1.90323,
-0.12160, 0.03293,-0.28016, 0.62455,-3.84106,
-0.90148,3.82392,1.21504,-1.69816,-1.52200, 
2.22686, 4.34673, 3.55668, 2.95986, 4.61175},
  {
-5.20111,2.19210,4.94733, 2.71958,-4.54324, // weights between input nodes #35..#1 and hidden node #3(node 38) 
4.61445, 1.56594,2.41261, 2.84549,-3.86666, 
4.84810,-1.81270, 1.69233, 0.55716,-1.83488,
-3.03277,-0.54890,-1.20630,-0.16535, -1.18334, 
0.24067, 1.58905, 0.63648,-1.39408,-0.55651, 
3.59428, 0.99077,-1.01523, 0.42523,-1.48574,
-1.37344, 0.63753,-0.43032,-0.48596,-0.54907},
  {
-4.17089,-2.98549,-4.10919,-4.99182, 3.74868, // weights between input nodes #35..#1 and hidden node #4(node 39) 
2.26058,-0.85960, 1.66758,-2.79042,-3.70780, 
2.29339,-0.35849,-1.55124, 1.58433, 1.10499, 
2.44456, 2.75115, 2.30093,-1.05347,-1.05200, 
4.28570, 1.08212,-0.32195, 1.16765,-2.46188, 
5.08905,-3.31206, 0.69853, 3.68656,-2.77828, 
2.33208,-1.54328, 2.98799,-1.29791, 8.51826},
  {
0.48853, -0.53863, 0.10548,-4.59209,-0.01060, // weights between input nodes #35..#1 and hidden node #5(node 40) 
-0.82454, 1.10321,-0.17667,-1.97648,-1.33136, 
2.73111, 1.81741,-0.33006, 3.49192, 1.19104,  
0.97590, -3.68946,  1.56817,-0.35891, 1.15819, 
-2.69485, 2.68437, 1.10918, 0.40138,-1.78966, 
1.07309, 0.10606,2.54544, -3.49080, 1.21237, 
4.34248,-4.84689,-6.13385,-1.90330, 2.87761},
  {
-4.03733, 1.93862,-0.95897, 2.32590, 1.77994, // weights between input nodes #35..#1 and hidden node #6(node 41)  
2.15719,-9.16668, 4.10929,-3.64019, 2.97669, 
2.18061, 0.26831,-4.83300, 0.54882, 3.27930,
-0.51976,-0.66562, 6.21965,2.16154, 2.59072, 
-4.21542,  2.96151, -3.89723,  1.14133,  0.33198, 
-1.18804, -3.49099,-3.25762, -3.50220,  3.44304, 
-0.87442, -1.84412,  0.46262, -2.34856, -0.92471},
  {
5.14780,-1.95760,  3.95810,  0.09348, -1.44836, // weights between input nodes #35..#1 and hidden node #7(node 42)  
4.04662,  2.24406, -5.07300,  3.80025,2.06971, 
-3.88581,  4.09542, -4.11968,  0.49839,  0.21427, 
-1.62193, -0.88297, -3.04762,2.09823, -1.12361,  
3.90103, -3.72851,  0.04676,  1.61871, 4.40685, 
2.04046, -0.69367,-2.57296,  3.33088,  3.36960, 
-4.17033,  1.12264, -0.21157, -3.18576, -0.35783},
  {
5.45344,  1.22673,  2.13492, 2.35250, 1.41840,  // weights between input nodes #35..#1 and hidden node #8(node 43) 
1.78302,  1.92355,  1.68297,  0.19878,0.62273,  
0.73127,  1.79597,  1.85335, -1.71801,  1.50035,  
3.40622, -1.36185, -1.10562,-3.47413,  4.06287,  
1.70828, -2.21353, -0.27056, -2.08593,  0.08626, 
-2.71939, -0.45421,0.33188, -1.09877, -3.75423,  
1.90793,  1.83746,  2.30651,  0.12002,  1.11427},

  { 1.04270,  -0.91010,  0.12760, -8.13864, 3.19465,  -6.55049,  -7.77042,   4.06586}, // weights between hidden nodes and outputnodes 
  { 1.99070,   3.01270,   2.31915,  -4.77945,   3.86375,   4.57107,   2.15670,   3.16120},
  {-0.19404,   1.31685,   1.34267,  -4.36703,  -7.39816,   0.22659,   6.61194,  -6.93355},
  {-1.04450,   0.39221,   0.73534,  -7.96407,   7.56009,  -0.48267,  -7.60821,  -8.10027},
  { 1.00542,  -0.53272,   3.69173,  -4.86436,  -7.62567,  -8.60892,   4.00512,   0.81997},
  {-2.56822,  -9.96070,   1.53898,  -3.02990,   4.06535,  -7.23399,   2.27581,   2.31334},
  { 4.31971,  -4.10545,   1.07713,  -5.68618,  -3.63292,   3.34242,  -9.40915,   6.40266},
  { 4.46764,  -4.65289,   4.58470,   5.02697,   1.09558,  -8.71502,  -7.95691,   5.29985},
  {-0.80360,  -8.39460,  -1.24795,  -1.60638,  -7.36580,   4.71770,   2.66506,   0.60244},
  {-2.18894,  -2.71944,  -3.83747,  -5.98214,   4.65249,   2.96763,   5.77988,  -9.32817},
  {-3.48300,   2.10522,  -6.07233,   4.02556,  -5.32018,  -4.91872,   2.50916,   0.28953},
  { 0.85689,   1.72514,   2.73181,   2.31337,  -9.63920,  -8.63983,  -4.51761,  -2.67046},
  {-0.84143,   0.17110,  -8.83850,   0.92849,   2.29573,  -4.47573,  -7.61515,   4.44046},
  {-0.78312,  -0.43441,   1.82524,   3.21846,   5.58219,  -7.97195,  -6.45505,  -7.46020},
  {-1.70158,  -0.56179,   5.76911,  -5.79977,  -6.23110,   2.19081,  -6.19567,  -7.91411},
  {-6.00023,   5.43061,   2.16075,  -7.41141,   2.60727,  -6.97563,   4.07104,  -3.54206},
{ 2.05038,   2.93813,  -7.21718,  -3.82373,  -5.54235,  -0.05646,  -4.31546,  -0.74816},
  { 3.38321,   1.89456,  -5.45053,  -5.57543,   3.69174,  -7.18267,   3.39892,   0.95184},
  {-8.97174,   2.61843,  -0.67615,  -4.54580,  -3.82115,   4.53880,  -0.57669,   2.92863},
  { 0.08693,  -8.26492,  -8.02895,   1.04894,   5.35993,  -1.63210,   0.49879,   1.36392},
  {-6.12713,   5.69301,   5.79102,   6.13988,  -0.57431,   6.00074,  -5.20064,  -6.57416},
  {-3.15158,  -0.20256,  -8.46564,   5.12257,   2.55136,   3.76630,  -3.68469,  -6.16815},
  { 2.10402,  -9.01808,  -0.75620,   3.96965,  -0.04689,   2.40921,  -6.39318,  -2.50666},
  {-11.33407,   1.53848,   1.62830,   4.77979,   2.05450,  -3.69063,  -5.46062,  -0.25050},
  {-9.36248,  -4.08868,  -0.80452,   3.08554,   0.25996,   4.62521,   2.54657,  -3.26597},
  { 1.50453,  -5.43966,   0.64486,   3.22042,  -2.63119,  -2.40258,   4.55873,  -5.80009}};

double bias[]={  
 

  -0.27420, 4.11689,1.00963,-1.94395,4.28464,0.74466,
-0.73710,-6.50657,-3.45800,-17.81938,-5.25087,
-3.21563,-4.78481,-4.30158,-8.21821,-13.65972,
-3.17413,-4.00145,-1.65194,-1.38041,-2.11628,
-6.06931,-3.26159,-6.49428,-0.43040,-7.83151,
-3.91423,-3.65182,-14.17759,-3.75544,-3.06637,
-2.68439,-2.66511,-3.75328
};
*/
  
 
   
  double charData[][]= {
    {0,1,1,1,0, // A
     1,0,0,0,1,
     1,0,0,0,1, 
     1,1,1,1,1,
     1,0,0,0,1, 
     1,0,0,0,1,
     1,0,0,0,1},
    
    {1,1,1,1,0, // B
     1,0,0,0,1,
     1,0,0,0,1,
     1,1,1,1,0,
     1,0,0,0,1,
     1,0,0,0,1,
     1,1,1,1,0},

    {0,1,1,1,0, // C
     1,0,0,0,1,
     1,0,0,0,0,
     1,0,0,0,0,
     1,0,0,0,0,
     1,0,0,0,1,
     0,1,1,1,0},

    {1,1,1,1,0, // D
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,1,1,1,0},

    {1,1,1,1,1, // E
     1,0,0,0,0,
     1,0,0,0,0,
     1,1,1,1,0,
     1,0,0,0,0,
     1,0,0,0,0,
     1,1,1,1,1},

    {1,1,1,1,1, // F
     1,0,0,0,0,
     1,0,0,0,0,
     1,1,1,1,0,
     1,0,0,0,0,
     1,0,0,0,0,
     1,0,0,0,0},
    
    {0,1,1,1,0,
     1,0,0,0,1,
     1,0,0,0,0,
     1,0,1,1,1,
     1,0,0,0,1,
     1,0,0,0,1,
     0,1,1,1,0},


    {1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,1,1,1,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1},

    {0,1,1,1,0,
     0,0,1,0,0,
     0,0,1,0,0,
     0,0,1,0,0,
     0,0,1,0,0,
     0,0,1,0,0,
     0,1,1,1,0},

    {1,1,1,1,1,
     0,0,0,0,1,
     0,0,0,0,1,
     0,0,0,0,1,
     0,0,0,0,1,
     1,0,0,0,1,
     0,1,1,1,0},

    {1,0,0,0,1,
     1,0,0,1,0,
     1,0,1,0,0,
     1,1,0,0,0,
     1,0,1,0,0,
     1,0,0,1,0,
     1,0,0,0,1},

    {1,0,0,0,0,
     1,0,0,0,0,
     1,0,0,0,0,
     1,0,0,0,0,
     1,0,0,0,0,
     1,0,0,0,0,
     1,1,1,1,1},

    {1,0,0,0,1,
     1,1,0,1,1,
     1,0,1,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1},

    {1,0,0,0,1,
     1,0,0,0,1,
     1,1,0,0,1,
     1,0,1,0,1,
     1,0,0,1,1,
     1,0,0,0,1,
     1,0,0,0,1},

    {0,1,1,1,0,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     0,1,1,1,0},

    {1,1,1,1,0,
     1,0,0,0,1,
     1,0,0,0,1,
     1,1,1,1,0,
     1,0,0,0,0,
     1,0,0,0,0,
     1,0,0,0,0},

    {0,1,1,1,0,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,1,0,1,
     1,0,0,1,1,
     0,1,1,1,1},

    {1,1,1,1,0,
     1,0,0,0,1,
     1,0,0,0,1,
     1,1,1,1,0,
     1,0,1,0,0,
     1,0,0,1,0,
     1,0,0,0,1},

    {0,1,1,1,0,
     1,0,0,0,1,
     1,0,0,0,0,
     0,1,1,1,0,
     0,0,0,0,1,
     1,0,0,0,1,
     0,1,1,1,0},

    {1,1,1,1,1,
     0,0,1,0,0,
     0,0,1,0,0,
     0,0,1,0,0,
     0,0,1,0,0,
     0,0,1,0,0,
     0,0,1,0,0},

    {1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     0,1,1,1,0},

    {1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     0,1,0,1,0,
     0,0,1,0,0},

    {1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,0,0,1,
     1,0,1,0,1,
     1,0,1,0,1,
     0,1,0,1,0},

    {1,0,0,0,1,
     1,0,0,0,1,
     0,1,0,1,0,
     0,0,1,0,0,
     0,1,0,1,0,
     1,0,0,0,1,
     1,0,0,0,1},

    {1,0,0,0,1,
     1,0,0,0,1,
     0,1,0,1,0,
     0,0,1,0,0,
     0,0,1,0,0,
     0,0,1,0,0,
     0,0,1,0,0},

    {1,1,1,1,1,
     0,0,0,0,1,
     0,0,0,1,0,
     0,0,1,0,0,
     0,1,0,0,0,
     1,0,0,0,0,
     1,1,1,1,1}
  };


  
  char chars[]= {'A','B','C','D','E','F','G','H','I'
			   ,'J','K','L','M','N','O','P','Q','R'
			   ,'S','T','U','V','W','X','Y','Z'};
 
  double output[]={0.99,0,0,0.99,0,
				0.99,0.99,0.99,0.98,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0,0,
				0,0,0,0};


  Color c[];
  Color background;
  Font myfont,myfont2;
  String outputstring;
  Button b1, b2, b3, b4,b5;
  Panel p1;
  Canvas c1;
  boolean drawBoard;
  int currentCharIndex;


  public boolean action(Event e, Object arg) {
      Object target = e.target;
	  String str;
	  int i,j,xmin,xmax,ymin,ymax;
	  double max,moy,nb;

	  xmin=22;
	  ymin=30;
	  xmax=0;
	  ymax=0;
	  
	  //if (target == b5) System.out.print("Training ..");
	  
	  if (target == b4) {
		  for (i=0;i<22;i++){
			  for (j=0;j<30;j++) {
				  if (drawing[i][j]>0) {
					  if (i<xmin) xmin=i;
					  if (i>xmax) xmax=i;
					  if (j<ymin) ymin=j;
					  if (j>ymax) ymax=j;
				  }
			  }
		  }
		  charData[currentCharIndex] = new double[35];
		  if ((xmax>0)&&(ymax>0)) {
			  for (i=xmin;i<=xmax;i++) {
				  for (j=ymin;j<=ymax;j++) {
					  if (charData[currentCharIndex][(int)Math.ceil((i-xmin)*5/(xmax-xmin+1))+(int)(j-ymin)*7/(ymax-ymin+1)*5]<4) {
						  charData[currentCharIndex][(int)Math.ceil((i-xmin)*5/(xmax-xmin+1))+(int)(j-ymin)*7/(ymax-ymin+1)*5]+=drawing[i][j];
					  }
				  }
			  }
		  } else {
			  for (i=0;i<22;i++) {
				  for (j=0;j<30;j++) {
					  if (charData[currentCharIndex][(int)Math.ceil(i*5/22)+(int)Math.ceil(j*7/30)*5]<4) {
						  charData[currentCharIndex][(int)Math.ceil(i*5/22)+(int)Math.ceil(j*7/30)*5]+=drawing[i][j];
					  }
				  }
			  }
		  }
		  max=0;
		  nb=0;
		  moy=0;
		  for (i=0;i<35;i++) {
			  moy+=charData[currentCharIndex][i];
			  if (charData[currentCharIndex][i]>max) {
				  max=charData[currentCharIndex][i];
			  }
			  if (charData[currentCharIndex][i]>0) nb++;
		  }
		  
		  
		  ////*added
		  for (int c=0;c<35;c++)
		  {
			  System.out.print(charData[currentCharIndex][c]+"  ");
			  if ( (c+1)%5==0)System.out.print("\n");
			  
		  }
		  
		  System.out.print("\n");
		  System.out.print("\n");
		  ////added*/
		  
		  
		  ////*added
		  double inValues[][]= 
		  			{
				     {-1,-1,-1,-1,-1,
				     -1,-1,-1,-1,-1,
				     -1,-1,-1,-1,-1,
				     -1,-1,-1,-1,-1,
				     -1,-1,-1,-1,-1,
				     -1,-1,-1,-1,-1,
				     -1,-1,-1,-1,-1}
				    };
		  
		  try{
		  for (int c=0;c<35;c++){
			  if(charData[currentCharIndex][c]>0)
				      inValues[0][c]=0.9;
				  else
					  inValues[0][c]=0.1;  
			  
			  System.out.print(inValues[0][c]+"  ");
			  if ( (c+1)%5==0)System.out.print(" >\n");
			  
			  
		  }
		  }
		  catch(java.lang.ArrayIndexOutOfBoundsException e1){
			  
			  
			  
		  }
		  
		////added*/
		  
		  System.out.print("\n");
		  
		  
		  for (i=0;i<35;i++) {
			  charData[currentCharIndex][i]=charData[currentCharIndex][i]/max;
		  }

		  moy=(moy/max)/nb;
		  for (i=0;i<35;i++) {
			  if (charData[currentCharIndex][i]>moy/4) charData[currentCharIndex][i]=1-Math.pow(1-charData[currentCharIndex][i],2);
		  }
		  drawBoard=true;
		  ////////changed
		  ///////////oneFeedForwardCycle();
		  
		  
		  
		  ////////added
		  for (i=0;i<22;i++){
			  System.out.print(i+" :");
			  for (j=0;j<30;j++) 
				  System.out.print(drawing[i][j]);
		  System.out.print("\n");
		  }
		  
		  
		  for (i=0;i<22;i++) {
			  for (j=0;j<30;j++) {
				  drawing[i][j]=0;
			  }
		  }
		
		  //////////////added
		  
		  for (int c=0;c<35;c++)
		  {
			  System.out.print(charData[currentCharIndex][c]+"  ");
			  if ( (c+1)%5==0)System.out.print("\n");
			  
		  }
		  System.out.print("\n");
		  
		  
		  draw();
		  
		  isTest=true;
		  double t[] = {};
		  BackPropagate(inValues[0],t);
		  /*
		  double maxout = -100.0;
		  int maxO = -1;
		  
		 
		  for(int o=0;o<10;o++){
			  if(outValues[o]>maxout)
				  {
				  maxout=outValues[o];
				  maxO = o;
				  }
		  
				  }
			  System.out.println("\n Recognized as :  "+maxO);
		  */
		  return true;
	  }
 
      
	  /*
	  
	  if (target == b3) { //They clicked b3
		  currentCharIndex=(currentCharIndex+1)%26;
		  str="Next:"+chars[(currentCharIndex+1) % 26];
		  b3.setLabel(str);
		  str="Prev:"+chars[(currentCharIndex+25) % 26];
		  b1.setLabel(str);
		  drawBoard=true;
		  oneFeedForwardCycle();
		  draw();
		  if (currentCharIndex>26) currentCharIndex=0;
		  return true;
	  }
	  if (target == b1) { //They clicked b1
		  currentCharIndex--;
		  if (currentCharIndex<0) currentCharIndex=25;
		  str="Next:"+chars[(currentCharIndex+1) % 26];
		  b3.setLabel(str);
		  str="Prev:"+chars[(currentCharIndex+25) % 26];
		  b1.setLabel(str);
		  drawBoard=true;
		  oneFeedForwardCycle();
		  draw();
		  return true;
	  }
	  if (target == b2) { //They clicked b2
		  currentCharIndex=0;
		  str="Next:"+chars[currentCharIndex+1];
		  b3.setLabel(str);
		  str="Prev:"+chars[25];
		  b1.setLabel(str);
		  fillMap();
		  drawBoard=true;
		  oneFeedForwardCycle();
		  for (i=0;i<22;i++) {
			  for (j=0;j<30;j++) {
				  drawing[i][j]=0;
			  }
		  }
		  draw();
		  return true;
	  }


*/
	  return false;
  }
  public boolean handleEvent(Event e) {
	  if (e.id == Event.WINDOW_DESTROY) {
		  if (inAnApplet) {
			  dispose();
		  } else {
			  System.exit(0);
		  }
	  }

	  return super.handleEvent(e);

  }
  



  public void initf() {
	setLayout(new BorderLayout());
	c = new Color[20];
    makeColors();
	//c1 = new Canvas();
	resize(600,450);
	//c1.resize(new Dimension(600,390));
	//add("South", c1);

    currentCharIndex=0;
    p1=new Panel();
    b1 = new Button();
    b1.setLabel("Prev:Z");

	drawing = new int[22][30];
    
    //b2 = new Button("Restart");
    
    //b3 = new Button("Next:B");

	b4 = new Button("Drawing recognition");
	
	b5 = new Button("Train");

	//closed
	//p1.add(b1);
	//p1.add(b2);
	//p1.add(b3);
	//closed
	
	p1.add(b4);
	//p1.add(b5);
	p1.setBackground(background);
	validate(); 
   
	add("South",p1);
	show();
    
    

    fillMap();
   
    
    
    myfont= new Font("Courier",Font.PLAIN,14);
    myfont2= new Font("Times",Font.ITALIC,12);
	drawBoard = true;
	/////closed
	////oneFeedForwardCycle();
	draw();
  }

  
  /////all variables
  
  double charDataSet[][]= {
		    {.1,.9,.9,.9,.1, // A
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9, 
		     .9,.9,.9,.9,.9,
		     .9,.1,.1,.1,.9, 
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9},
		    
		    {.9,.9,.9,.9,.1, // B
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.9,.9,.9,.1,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.9,.9,.9,.1},

		    {.1,.9,.9,.9,.1, // C
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.9,
		     .1,.9,.9,.9,.1},

		    {.9,.9,.9,.9,.1, // D
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.9,.9,.9,.1},

		    {.9,.9,.9,.9,.9, // E
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.1,
		     .9,.9,.9,.9,.1,
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.1,
		     .9,.9,.9,.9,.9},

		    {.9,.9,.9,.9,.9, // F
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.1,
		     .9,.9,.9,.9,.1,
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.1},
		    
		    {.1,.9,.9,.9,.9,  //G
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.1,
		     .9,.1,.9,.9,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .1,.9,.9,.9,.1},


		    {.9,.1,.1,.1,.9,  //H
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.9,.9,.9,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9},

		    {.1,.9,.9,.9,.1,  //I
		     .1,.1,.9,.1,.1,
		     .1,.1,.9,.1,.1,
		     .1,.1,.9,.1,.1,
		     .1,.1,.9,.1,.1,
		     .1,.1,.9,.1,.1,
		     .1,.9,.9,.9,.1},

		    {.9,.9,.9,.9,.9,  //J
		     .1,.1,.1,.1,.9,  
		     .1,.1,.1,.1,.9,
		     .1,.1,.1,.1,.9,
		     .1,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .1,.9,.9,.9,.1},

		    {.9,.1,.1,.1,.9,  //K
		     .9,.1,.1,.9,.1,
		     .9,.1,.9,.1,.1,
		     .9,.9,.1,.1,.1,
		     .9,.1,.9,.1,.1,
		     .9,.1,.1,.9,.1,
		     .9,.1,.1,.1,.9},

		    {.9,.1,.1,.1,.1,   //L
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.1,
		     .9,.9,.9,.9,.9},

		    {.9,.1,.1,.1,.9,  //M
		     .9,.9,.1,.9,.9,
		     .9,.1,.9,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9},

		    {.9,.1,.1,.1,.9,   //N
		     .9,.1,.1,.1,.9,
		     .9,.9,.1,.1,.9,
		     .9,.1,.9,.1,.9,
		     .9,.1,.1,.9,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9},

		    {.1,.9,.9,.9,.1,   //O
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .1,.9,.9,.9,.1},

		    {.9,.9,.9,.9,.1,   //P
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.9,.9,.9,.1,
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.1,
		     .9,.1,.1,.1,.1},

		    {.1,.9,.9,.9,.1,  //Q
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.9,.1,.9,
		     .9,.1,.1,.9,.9,
		     .1,.9,.9,.9,.9},

		    {.9,.9,.9,.9,.1,  //R
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.9,.9,.9,.1,
		     .9,.1,.9,.1,.1,
		     .9,.1,.1,.9,.1,
		     .9,.1,.1,.1,.9},

		    {.1,.9,.9,.9,.1,  //S
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.1,
		     .1,.9,.9,.9,.1,
		     .1,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .1,.9,.9,.9,.1},

		    {.9,.9,.9,.9,.9,  //T
		     .1,.1,.9,.1,.1,
		     .1,.1,.9,.1,.1,
		     .1,.1,.9,.1,.1,
		     .1,.1,.9,.1,.1,
		     .1,.1,.9,.1,.1,
		     .1,.1,.9,.1,.1},

		    {.9,.1,.1,.1,.9,  //U
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .1,.9,.9,.9,.1},

		    {.9,.1,.1,.1,.9,  //V
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .1,.9,.1,.9,.1,
		     .1,.1,.9,.1,.1},

		    {.9,.1,.1,.1,.9,  //W
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9,
		     .9,.1,.9,.1,.9,
		     .9,.1,.9,.1,.9,
		     .9,.1,.9,.1,.9,
		     .1,.9,.1,.9,.1},

		    {.9,.1,.1,.1,.9,  //X
		     .9,.1,.1,.1,.9,
		     .1,.9,.1,.9,.1,
		     .1,.1,.9,.1,.1,
		     .1,.9,.1,.9,.1,
		     .9,.1,.1,.1,.9,
		     .9,.1,.1,.1,.9},

		    {.9,.1,.1,.1,.9,  //Y
		     .9,.1,.1,.1,.9,
		     .1,.9,.1,.9,.1,
		     .1,.1,.9,.1,.1,
		     .1,.1,.9,.1,.1,
		     .1,.1,.9,.1,.1,
		     .1,.1,.9,.1,.1},

		    {.9,.9,.9,.9,.9,   //Z
		     .1,.1,.1,.1,.9,
		     .1,.1,.1,.9,.1,
		     .1,.1,.9,.1,.1,
		     .1,.9,.1,.1,.1,
		     .9,.1,.1,.1,.1,
		     .9,.9,.9,.9,.9} 
		  };

  
  
  
  
  double inWeights[][] = { 
		  {-5.4677860989667755,  -1.121086703566123,  -2.9606206959743524,  5.3945748071028685,  2.6979705130039076,  -1.362475685469564,  -3.3234851941036436,  -5.598873628868096,  -5.1029203247782915,  5.77161501234889,  2.8739846289715247,  3.8423925393790017,  5.071417457616046,  1.33416335809268,  3.179238827991025,  -5.486071992560137,  2.309124104303585,  -3.6516534217760754,  -2.612176104717327,  -2.0220976386873604,  -3.3854491345950244,  -1.7006261207276079,  0.915760060505005,  -1.5672450786803271,  1.9689896534203208,  0.17344913053405608,  -2.453688855771169,  3.3380229694158845,  5.261851672549098,  -2.3314260730320013,  -0.5061585818559534,  2.015254513512208,  -0.23994072473816372,  2.1826485540371707,  0.6640238448718371},  
		  {0.5717115891717715,  -1.598124942713931,  -0.38615216606329145,  -1.8925068062158468,  -2.7599880721364123,  -1.7377246018416708,  -0.9502264767426891,  0.700319141836295,  4.386958184519742,  -1.734338050782722,  -0.9461612959373608,  1.9268666784991921,  0.9857476834403964,  2.788411735355674,  -1.5124788970110212,  -0.169243775260915,  -2.5538104111661983,  -1.9704953766305866,  0.4570066608672839,  -4.1733363980647145,  2.4257087003426747,  -0.16352691215531467,  -3.8363380449785085,  -0.1616530392192076,  -1.1076499050891055,  7.2854617898523335,  -0.9166885506216714,  -3.126641786627454,  -2.6063179911098606,  -1.5679803926811917,  5.469538498353807,  -3.300131289709163,  -2.2045987334044694,  -3.8951820066403577,  2.1801651563765003},  
		  {-0.6814195252636026,  0.20380303852686413,  -1.718577020226303,  2.63548026001172,  0.25183505936042266,  -5.16268779671169,  3.8774636520727133,  -0.8788176397658622,  1.290114204535075,  0.8146342350817828,  1.6451165255976141,  1.8199818605437394,  -1.2075444918925815,  -4.328246980938279,  -0.8036977215162495,  4.531027966431041,  -4.408444678583253,  3.5952764707669513,  -0.3653573624158747,  -0.8730547799868819,  0.388098792805346,  2.0797957283366957,  -3.4572143905917776,  0.7741795570841534,  7.56251761566812,  0.8277607670683553,  1.9959859456001456,  -2.6526196587671027,  -4.653314556745158,  -0.24619436289569252,  -0.5843478793907722,  -0.6719724683310204,  -1.3124261519113871,  0.5238837325006528,  0.19964713481499954},  
		  {-0.5519827486586729,  1.1098665316288419,  2.7687736480464498,  -1.2560419187355876,  -0.34845479897883347,  -3.50707472076503,  -0.34049177421493676,  0.28720282788872437,  2.238104897470833,  -0.7118093803885226,  -1.3274503061099698,  1.511171151181812,  -0.2836292085533496,  -0.831126161642838,  -0.10576791278597414,  2.9879722666146273,  -0.34085590118063613,  -2.9471684427066567,  0.09037931381722335,  -0.475186437820771,  -0.7747188365317251,  -0.5034472128052142,  -0.30531247805497885,  -2.308524945598673,  3.296985181343263,  3.321301961087183,  -0.6517196820340978,  0.11832104135073973,  -1.315884076531216,  0.6669015199984538,  1.868007364630436,  1.3900815321082816,  0.40692747315470773,  -0.8416794053946892,  0.347883941654132},  
		  {2.7296258135044136,  0.5540415838709133,  -0.7474701113064387,  -4.29200260099043,  -3.038992166333761,  0.6457886224045851,  2.139989653756584,  -0.7619947022133295,  -1.9752081446017267,  2.0109221006957734,  -0.3741698968279316,  -3.1667747244036955,  2.663612262726275,  0.9228248345244722,  1.8790638057628792,  -0.6812021441776644,  0.27317709231518894,  -3.177359179613685,  4.536022260557858,  3.2721841560530547,  -0.44961981228913056,  2.3916189630338494,  -0.7693564611094493,  -0.6286278269884167,  0.8121731231145299,  -1.7261444815149396,  -1.662849265017595,  -0.7952013794635687,  -5.3592590511475375,  3.287308708586046,  -0.02834374104487368,  -0.13267052470641338,  -3.423937144721092,  -3.636998587667166,  0.0907892716756396},  
		  {-0.37624906919007856,  4.112199116792747,  2.164081762717226,  2.5671364084285084,  4.195396566492241,  -2.150378817726123,  -1.125483399943589,  -1.0116982411347508,  2.391925274953419,  -0.96837958264809,  1.6177954371128829,  -2.3137026910306937,  -1.2620075617843172,  -0.24416325960015162,  2.3426054375623706,  1.448666136173371,  -1.2594824949423882,  2.136438426959899,  -4.704957168561692,  1.2645514071147979,  0.944354477309232,  -1.8730300052498545,  -1.0873165144201644,  0.3958586820384833,  2.0755929007317127,  -2.1575215612285543,  0.8143424756920935,  -1.807867859037955,  3.1055273000980224,  -3.0062058822785196,  -2.054662126734274,  2.6795399247393257,  0.8586773329563913,  1.9190563929127367,  0.21277531547726916},  
		  {-4.27094746559904,  -0.06577475460483405,  -1.867713242302001,  -2.3946958637315845,  -3.4402649393232982,  -4.0277704009198665,  -0.6906854710972983,  1.7368045974854578,  1.5957078116425512,  0.6932369395688165,  -3.445439736228239,  -1.8634206527561652,  0.5473137768172677,  4.0629814898823975,  2.9315104858565193,  -3.1332309368575615,  0.1525987198899738,  -2.7755003597419954,  -1.7226764727568975,  3.9445332520943936,  -0.19236671645910788,  -1.8758174051755594,  -1.4975860523879587,  -0.20398511034372654,  2.594871481747271,  1.3137613509813906,  -2.219148992865759,  2.0169321171061516,  0.37865973296755145,  -1.277453852459197,  4.671431264438558,  2.0427436117800997,  5.388030049234928,  0.12830837406023177,  0.7019930401202236},  
		  {-1.920083945272999,  0.6461249005476569,  0.6729289724591814,  -1.1514443132276109,  1.4930986376870619,  1.638198867495897,  0.5088853080804785,  -0.6958453434092579,  0.41612774631360455,  -1.6040345876832678,  0.4234165324323416,  1.2684008196464653,  1.3711900299594069,  -0.6516752290016572,  -2.996124979600264,  2.9381709131156333,  -2.0027900912552794,  0.03774478020560086,  -0.332109673834133,  -1.7431896295199252,  0.6349409382864322,  -0.15286023554392122,  -0.6777325192322307,  -1.503964480324069,  0.5637549913739601,  3.3916668083696706,  0.4534009147636231,  1.0964435557797862,  0.17638823487202032,  -1.132491073024188,  0.6655839157160399,  -0.5324394685544068,  0.02874298171390567,  -0.6742127985979107,  -0.2614375581475484},  

  };

double hiddenBias[]={0.7497136162620083,  3.7859968540793543,  -2.8631974260235777,  -1.903908973231949,  0.6682819846510232,  -3.784306700083539,  2.286704623964389,  -0.5746510089844893};

double inValue[][] = {
			 //0
			{0.9,0.9,0.9,0.9,0.9,
			 0.9,0.1,0.1,0.1,0.9,			
			 0.9,0.1,0.1,0.1,0.9,
			 0.9,0.1,0.1,0.1,0.9,
			 0.9,0.1,0.1,0.1,0.9,
			 0.9,0.1,0.1,0.1,0.9,
			 0.9,0.9,0.9,0.9,0.9},
									 
			
			{0.9,0.1,0.1,0.1,0.1,
			 0.9,0.1,0.1,0.1,0.1,			
			 0.9,0.1,0.1,0.1,0.1,
			 0.9,0.1,0.1,0.1,0.1,
			 0.9,0.1,0.1,0.1,0.1,
			 0.9,0.1,0.1,0.1,0.1,
			 0.9,0.1,0.1,0.1,0.1},
			
			{0.9,0.9,0.9,0.9,0.9,
		     0.1,0.1,0.1,0.1,0.9,			
			 0.1,0.1,0.1,0.1,0.9,
			 0.9,0.9,0.9,0.9,0.9,
			 0.9,0.1,0.1,0.1,0.1,
			 0.9,0.1,0.1,0.1,0.1,
			 0.9,0.9,0.9,0.9,0.9},
			 
			 
			{0.9,0.9,0.9,0.9,0.9,
			 0.1,0.1,0.1,0.1,0.9,			
			 0.1,0.1,0.1,0.1,0.9,
			 0.9,0.9,0.9,0.9,0.9,
			 0.1,0.1,0.1,0.1,0.9,
			 0.1,0.1,0.1,0.1,0.9,
			 0.9,0.9,0.9,0.9,0.9},
			
			 
			{0.9,0.1,0.1,0.1,0.9,
			 0.9,0.1,0.1,0.1,0.9,			
			 0.9,0.1,0.1,0.1,0.9,
			 0.9,0.9,0.9,0.9,0.9,
			 0.1,0.1,0.1,0.1,0.9,
			 0.1,0.1,0.1,0.1,0.9,
			 0.1,0.1,0.1,0.1,0.9,}, 
			 
			 
			{0.9,0.9,0.9,0.9,0.9,
			 0.9,0.1,0.1,0.1,0.1,
			 0.9,0.1,0.1,0.1,0.1,
			 0.9,0.9,0.9,0.9,0.9,
			 0.1,0.1,0.1,0.1,0.9,
			 0.1,0.1,0.1,0.1,0.9,
			 0.9,0.9,0.9,0.9,0.9},
			 
			 
			{0.9,0.9,0.9,0.9,0.9,
			 0.9,0.1,0.1,0.1,0.1,
			 0.9,0.1,0.1,0.1,0.1,
			 0.9,0.9,0.9,0.9,0.9,
			 0.9,0.1,0.1,0.1,0.9,
			 0.9,0.1,0.1,0.1,0.9,
			 0.9,0.9,0.9,0.9,0.9},
			 
		   {0.9,0.9,0.9,0.9,0.9,
			0.1,0.1,0.1,0.1,0.9,		
		    0.1,0.1,0.1,0.1,0.9,
		    0.1,0.1,0.1,0.1,0.9,
			0.1,0.1,0.1,0.1,0.9,
		    0.1,0.1,0.1,0.1,0.9,
		    0.1,0.1,0.1,0.1,0.9},
			
		    	{0.9,0.9,0.9,0.9,0.9,
				 0.9,0.1,0.1,0.1,0.9,
				 0.9,0.1,0.1,0.1,0.9,
				 0.9,0.9,0.9,0.9,0.9,
				 0.9,0.1,0.1,0.1,0.9,
				 0.9,0.1,0.1,0.1,0.9,
				 0.9,0.9,0.9,0.9,0.9},
				 
				 	{0.9,0.9,0.9,0.9,0.9,
					 0.9,0.1,0.1,0.1,0.9,
					 0.9,0.1,0.1,0.1,0.9,
					 0.9,0.9,0.9,0.9,0.9,
					 0.1,0.1,0.1,0.1,0.9,
					 0.1,0.1,0.1,0.1,0.9,
					 0.9,0.9,0.9,0.9,0.9},
				
			 
				  

};


double hiddenWeights[][] = {
		{3.6297698049035954,  -0.8492958321033665,  -5.319148860489001,  -6.399634497958842,  7.335471067084514,  2.9980061966953384,  3.657400743525646,  0.6807053303037306},  
		{4.711326114330226,  5.575241288333656,  5.372344298607877,  1.7446457411998368,  -4.695878306129261,  -6.779223016512918,  0.024382050729752112,  -0.6195610455402446},  
		{-4.151060156949041,  -2.6838089816334554,  4.290971290128035,  -8.404976306869749,  -1.5703515473934588,  2.2132661632040564,  6.346910719375428,  7.151012126302697},  
		{4.199525348563884,  5.554557174258942,  5.307153100422813,  1.322522004671316,  -5.790159349581679,  2.3983394122190047,  -4.72091429753831,  -1.4059708186262687},  
		{6.686333684392084,  -3.1287144530966757,  -2.2633459528287196,  6.486905843229479,  5.266327660996366,  -0.8532084094098185,  -4.640529563880542,  8.51818605442201},  

};

double outputBias[]={-1.898786185688435,  -1.9305681815556346,  -2.164053405798293,  -5.143043535543478,  -8.50948535034472};

double hiddenValues[] = {0,0,0,0,0,0,0,0};

double outValues[] = {0,0,0,0,0};


double targetValues1[][] = {{0.9,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1},
				   {0.1,0.9,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1},
				   {0.1,0.1,0.9,0.1,0.1,0.1,0.1,0.1,0.1,0.1},
				   {0.1,0.1,0.1,0.9,0.1,0.1,0.1,0.1,0.1,0.1},
				   {0.1,0.1,0.1,0.1,0.9,0.1,0.1,0.1,0.1,0.1},
				   {0.1,0.1,0.1,0.1,0.1,0.9,0.1,0.1,0.1,0.1},
				   {0.1,0.1,0.1,0.1,0.1,0.1,0.9,0.1,0.1,0.1},
				   {0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.9,0.1,0.1},
				   {0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.9,0.1},
				   {0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.9},
				   
				  }; //for 1


double targetValues[][]={
		//{0.1,0.1,0.1,0.1,0.1},  //0
		{0.1,0.1,0.1,0.1,0.9},  //1
		{0.1,0.1,0.1,0.9,0.1},
		{0.1,0.1,0.1,0.9,0.9},  //3
		
		{0.1,0.1,0.9,0.1,0.1},  
		{0.1,0.1,0.9,0.1,0.9},
		{0.1,0.1,0.9,0.9,0.1},
		{0.1,0.1,0.9,0.9,0.9},  //7
		
		{0.1,0.9,0.1,0.1,0.1},
		{0.1,0.9,0.1,0.1,0.9},
		{0.1,0.9,0.1,0.9,0.1},
		{0.1,0.9,0.1,0.9,0.9},  //11
		
		{0.1,0.9,0.9,0.1,0.1},
		{0.1,0.9,0.9,0.1,0.9},
		{0.1,0.9,0.9,0.9,0.1},
		{0.1,0.9,0.9,0.9,0.9}, //15
		
		{0.9,0.1,0.1,0.1,0.1},
		{0.9,0.1,0.1,0.1,0.9},
		{0.9,0.1,0.1,0.9,0.1},
		{0.9,0.1,0.1,0.9,0.9},  //19
		
		{0.9,0.1,0.9,0.1,0.1},
		{0.9,0.1,0.9,0.1,0.9},
		{0.9,0.1,0.9,0.9,0.1},
		{0.9,0.1,0.9,0.9,0.9},  //23
		
		{0.9,0.9,0.1,0.1,0.1},
		{0.9,0.9,0.1,0.1,0.9},
		{0.9,0.9,0.1,0.9,0.1},  //26
};

char outChar[] = {'A', 'B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};

double learningRate = 0.1;
double momentum = 0.6;

double outputError []={0,0,0,0,0,0,0,0,0,0};
double hiddenError []={0,0,0,0,0,0,0,0};

double currentInputWeightUpdate[][]  = new double[8][36];
double previousInputWeightUpdate[][] = new double[8][36];
double totalInputWeightUpdate [][]   = new double[8][36];


double currentHiddenWeightUpdate[][]  = new double[26][9];
double previousHiddenWeightUpdate[][] = new double[26][9];
double totalHiddenWeightUpdate [][]   = new double[26][9];

boolean isTest = false;
  
  
  


int numofData=26;  //was 10
int numofChar=26;
int numofOutput= 5; //was 26 
int numofInput= 35;
int numofHidden= 8;
  
  
public void BackPropagate(double currentInputValue[],double currentTargetValue[]){
	double y = 0.0;
	double o = 0.0;
	
	//	hidden layer unit value calculation
	//	if(!isTest)
	for(int i=0;i<numofHidden;i++)
	{
		y = hiddenBias[i];
		o = 0.0;
		
		for(int j=0;j<numofInput;j++)
		{
			y=y+(currentInputValue[j])*(inWeights[i][j]);
			
		}
		
		o=1/(1+Math.exp(-1*y));
		hiddenValues[i]=o;
		//	System.out.print(hiddenValues[i]+"  ");
	}
	
	//	System.out.print("\n");
	
	//	output layer unit value calculation
	
	//System.out.print("OUTPUT::\n");
	//if(!isTest)
	for(int i=0;i<numofOutput;i++)
	{
		y = outputBias[i];
		o = 0.0;
		
		for(int j=0;j<numofHidden;j++)
		{
			y=y+(hiddenValues[j])*(hiddenWeights[i][j]);
			
		}
		
		o=1/(1+Math.exp(-1*y));
		outValues[i]=o;
		//	System.out.print(outValues[i]+"  ");
		
		
		
		if(isTest)
		{
			
			System.out.print(outValues[i]+"  ");
			//if(outValues[i]>=0.75)	
				//System.out.print("( "+outChar[i]+" )");
		}
		
		
	}	
	
	
	int bin=0, dec=0;
	for(int c=0;c<numofOutput;c++)
	{
		bin=(outValues[c]>=0.70)? 1 :0;
		dec+=16/Math.pow(2, c)*bin;
	}
	if(isTest)
		System.out.print("dec=" +dec+ " "+outChar[dec-1]);
	//System.out.print("( "+outChar[max]+" )");
	//System.out.print("\n");
	
	
	if(!isTest)
		//	output layer Error calculation
		for(int i=0;i<numofOutput;i++)
		{
			
			outputError[i]=outValues[i]*(1-outValues[i])*(currentTargetValue[i]-outValues[i]);
			//System.out.print(outputError[i]+" ");
		}
	
	
	////System.out.print("\n\n");
	
	if(!isTest)
		//	hidden layer Error calculation
		for(int i=0;i<numofHidden;i++)
		{
			double sum = 0;
			for(int j=0;j<numofOutput;j++)
				
				sum+=outputError[j]*hiddenWeights[j][i]; //this is critical as hidden weights are in reverse as for output value calculation
			
			
			hiddenError[i]=hiddenValues[i]*(1-hiddenValues[i])*sum;
			//	//System.out.print(hiddenError[i]+"  ");
			
		}
	
	//	update Weights
	
	
	
	
	
	if(!isTest)
		//	update hidden bias
		for(int hb=0;hb<numofHidden;hb++){
			currentInputWeightUpdate[hb][0] = learningRate*hiddenError[hb];
			totalInputWeightUpdate [hb][0] = momentum * previousInputWeightUpdate[hb][0]+currentInputWeightUpdate[hb][0];
			hiddenBias[hb]+=totalInputWeightUpdate [hb][0];
			previousInputWeightUpdate[hb][0] = totalInputWeightUpdate [hb][0]; 
		}
	
	////					System.out.print("\n\n");
	///System.out.print(previousInputWeightUpdate[0][0]);
	
	
	//update input weights
	
	if(!isTest)
		for(int h=0;h<numofHidden;h++)
		{
			for(int i=0;i<numofInput;i++)
			{
				
				currentInputWeightUpdate[h][i+1]=learningRate*hiddenError[h]*currentInputValue[i];
				
				totalInputWeightUpdate [h][i+1] = momentum * previousInputWeightUpdate[h][i+1]+currentInputWeightUpdate[h][i+1];
				
				inWeights[h][i]+=totalInputWeightUpdate[h][i+1];
				
				/////		System.out.print(inWeights[h][i]+"  ");
				
				previousInputWeightUpdate[h][i+1]=totalInputWeightUpdate[h][i+1];
				
			}
			
			//	//System.out.print("\n");
		}
	
	////System.out.print("\n");
	//	//System.out.print("\n");

	


	if(!isTest)
		//	update output bias
		for(int ob=0;ob<numofOutput;ob++){
			currentHiddenWeightUpdate[ob][0]=learningRate*outputError[ob];
			totalHiddenWeightUpdate[ob][0]=momentum * previousHiddenWeightUpdate[ob][0]+currentHiddenWeightUpdate[ob][0];
			
			outputBias[ob]+=totalHiddenWeightUpdate[ob][0];
			
			previousHiddenWeightUpdate[ob][0]=totalHiddenWeightUpdate[ob][0];
			
			//	//System.out.print(outputBias[ob]+" ");	

		}

	//	//System.out.print("\n\n");	
	//update hidden weights
	if(!isTest)	
		for(int ol=0;ol<numofOutput;ol++)
		{
			for(int h=0;h<numofHidden;h++)
			{
				
				currentHiddenWeightUpdate[ol][h+1]=learningRate*outputError[ol]*hiddenValues[h];
				
				totalHiddenWeightUpdate[ol][h+1]=momentum * previousHiddenWeightUpdate[ol][h+1]+currentHiddenWeightUpdate[ol][h+1];
				
				hiddenWeights[ol][h]+=totalHiddenWeightUpdate[ol][h+1];
				
				previousHiddenWeightUpdate[ol][h+1]=totalHiddenWeightUpdate[ol][h+1];
				
				////	System.out.print(hiddenWeights[ol][h]+" ");
				
				
			}
			//	//System.out.print("\n");

		}
	
}
  
  
  
  
  
  
  

  public void BackPropagate1(double currentInputValue[],double currentTargetValue[]){
		double y = 0.0;
		double o = 0.0;
		
		//hidden layer unit value calculation
		//if(!isTest)
		for(int i=0;i<8;i++)
		{
			y = hiddenBias[i];
			o = 0.0;
			
			for(int j=0;j<35;j++)
			    {
				y=y+(currentInputValue[j])*(inWeights[i][j]);
			    
			    }
			
			o=1/(1+Math.exp(-1*y));
			hiddenValues[i]=o;
		//System.out.print(hiddenValues[i]+"  ");
		}
		
		//System.out.print("\n");

		//output layer unit value calculation
		
		//System.out.print("OUTPUT::\n");
		//if(!isTest)
		for(int i=0;i<10;i++)
		{
			y = outputBias[i];
			o = 0.0;
			
			for(int j=0;j<8;j++)
			    {
				y=y+(hiddenValues[j])*(hiddenWeights[i][j]);
			    
			    }
			
			o=1/(1+Math.exp(-1*y));
			outValues[i]=o;
		System.out.print(outValues[i]+"  ");
		
		
			
			if(isTest)
			{
				
				//System.out.print(outValues[i]+"  ");
				//if(outValues[0]>=0.4)	
					//System.out.print("\nRecognized as 0 ...");
			}
			
			
	}	
		
		
		
		
		System.out.print("\n");
		
		if(!isTest)
		//output layer Error calculation
		for(int i=0;i<10;i++)
		{
			
			outputError[i]=outValues[i]*(1-outValues[i])*(currentTargetValue[i]-outValues[i]);
			////System.out.print(outputError[i]+" ");
		}
		
		
		////System.out.print("\n\n");
		
		if(!isTest)
		//hidden layer Error calculation
		for(int i=0;i<8;i++)
		{
			double sum = 0;
			for(int j=0;j<10;j++)
				
				sum+=outputError[j]*hiddenWeights[j][i]; //this is critical as hidden weights are in reverse as for output value calculation
			
				
			hiddenError[i]=hiddenValues[i]*(1-hiddenValues[i])*sum;
			////System.out.print(hiddenError[i]+"  ");
		
		}
	
	//update Weights
	
		
		
	
		
		if(!isTest)
		//update hidden bias
		for(int hb=0;hb<8;hb++){
		currentInputWeightUpdate[hb][0] = learningRate*hiddenError[hb];
		totalInputWeightUpdate [hb][0] = momentum * previousInputWeightUpdate[hb][0]+currentInputWeightUpdate[hb][0];
		hiddenBias[hb]+=totalInputWeightUpdate [hb][0];
		previousInputWeightUpdate[hb][0] = totalInputWeightUpdate [hb][0]; 
		}
		
		////					System.out.print("\n\n");
							///System.out.print(previousInputWeightUpdate[0][0]);
		
			
		//update input weights
		
		if(!isTest)
		for(int h=0;h<8;h++)
		{
			for(int i=0;i<35;i++)
			{
				
				currentInputWeightUpdate[h][i+1]=learningRate*hiddenError[h]*currentInputValue[i];
				
				totalInputWeightUpdate [h][i+1] = momentum * previousInputWeightUpdate[h][i+1]+currentInputWeightUpdate[h][i+1];

				inWeights[h][i]+=totalInputWeightUpdate[h][i+1];
				
		/////		System.out.print(inWeights[h][i]+"  ");
				
				previousInputWeightUpdate[h][i+1]=totalInputWeightUpdate[h][i+1];
				
			}
		
		////System.out.print("\n");
		}
		
		////System.out.print("\n");
		////System.out.print("\n");
		
			
		
		
		if(!isTest)
		//update output bias
		for(int ob=0;ob<10;ob++){
			currentHiddenWeightUpdate[ob][0]=learningRate*outputError[ob];
			totalHiddenWeightUpdate[ob][0]=momentum * previousHiddenWeightUpdate[ob][0]+currentHiddenWeightUpdate[ob][0];
			
			outputBias[ob]+=totalHiddenWeightUpdate[ob][0];
			
			previousHiddenWeightUpdate[ob][0]=totalHiddenWeightUpdate[ob][0];
			
		////System.out.print(outputBias[ob]+" ");	
		
		}
		
		////System.out.print("\n\n");	
			//update hidden weights
		if(!isTest)	
		for(int ol=0;ol<10;ol++)
		{
			for(int h=0;h<8;h++)
			{
				
				currentHiddenWeightUpdate[ol][h+1]=learningRate*outputError[ol]*hiddenValues[h];
				
				totalHiddenWeightUpdate[ol][h+1]=momentum * previousHiddenWeightUpdate[ol][h+1]+currentHiddenWeightUpdate[ol][h+1];
				
				hiddenWeights[ol][h]+=totalHiddenWeightUpdate[ol][h+1];
				
				previousHiddenWeightUpdate[ol][h+1]=totalHiddenWeightUpdate[ol][h+1];
				
			////	System.out.print(hiddenWeights[ol][h]+" ");
				
				
			}
		////System.out.print("\n");
		
		}
			
	}
	
  
  
  
  /*
  public void oneFeedForwardCycle() {
	  int index1,index2,layer,targetNode,sourceNode;
	  double sum,oldsum;

	  for(layer=1;layer<numLayers;layer++){
		  index1=nodeStart[layer]-numNodes[0]; 
		  index2=nodeStart[layer-1]-numNodes[0];
    
		  for(targetNode=0;targetNode<numNodes[layer];targetNode++) {
			  sum=0;
			  oldsum=0;

			  for(sourceNode=0;sourceNode<numNodes[layer-1];sourceNode++) {
				  // Use characterData as Input if Input Layer
				  if (layer==1) {
					  sum=oldsum+charData[currentCharIndex][sourceNode]*weights[index1+targetNode][34-sourceNode]; 
				  } // else Use Last Layer's Outputs as Input 
				  else sum=oldsum+output[index2+sourceNode]*weights[index1+targetNode][7-sourceNode]; 
				  oldsum=sum;
			  }
			  output[index1+targetNode]=(1/(1+Math.exp(-(sum+bias[index1+targetNode]))));
		  }
	  }
  }


*/

  public void fillMap()
  {
    
    drawBoard=true;
  }
  

  public void makeColors()
  {
    for (i=0;i<20;i++)
	  c[i]=new Color(0,10*i+55,0);
  
    background=new Color(203,202,202);
  }



  public void fillBox(Graphics g,int x,int y,Color c)
  {
    g.setColor(c);
    g.fillRect(x,y,16,16);
  }
  

  public boolean mouseDrag(Event evt, int x, int y) {
	  //g = getGraphics ( );
	  if ((x>427)&&(x<515)&&(y>47)&&(y<167)){
		  g.drawLine ( x, y, x, y );
		  last_x = x;
		  last_y = y;
		  (drawing[(x-427)/4][(y-47)/4])++;
	  }
	  return true;
  }
  
  

  public boolean mouseDown(java.awt.Event evt, int x, int y)
  {
    pointX=-100;
    pointY=-100;
    pickX=-1;
    pickY=-1;
    i=(y-48)/17;
    j=(x-48)/17;
    drawBoard=true;
    
    /*
    if ((i>-1)&&(i<7)&&(j>-1)&&(j<5)) {
		if (charData[currentCharIndex][i*5+j]<0.5) {
			pickX=j;
			pickY=i;
			pointY=y;
			pointX=x;
			charData[currentCharIndex][i*5+j]=1;
			//oneFeedForwardCycle();
			draw();
			return true;
		} else if (charData[currentCharIndex][i*5+j]>=0.5) {
			pickX=j;
			pickY=i;
			pointY=y;
			pointX=x;
			charData[currentCharIndex][i*5+j]=0;    
			//oneFeedForwardCycle();
			draw();
			return true;
		}
	}
*/
    if ((x>427)&&(x<515)&&(y>47)&&(y<167)){
		last_x = x;
		last_y = y;
		g.setColor ( Color.black );

		return true;
	}
    
    return false;
  }
  
 

 
  public void fixBox(Graphics g,int x,int y,int w,int h,Color c)
  {
    g.setColor(c);
    g.fillRect(x,y,w,h);
  }
  
  /*	public boolean mouseUp(java.awt.Event evt, int x, int y)
	{
	if (dragX>-1)
	{
	drawBoard=false;
	repaint();
	}
	return false;
	}*/
  
//  public void update(Graphics g)
//  {
    /*  drawBoard=true;*/
//    draw();
//  }
  
  public void draw() {
	  double carval=-1;
	  int car=-1;
	  g = getGraphics();
	  if (drawBoard) {
		  g.setFont(myfont);
		  g.setColor(background);
		  
		  /////closed
		  /*
		  g.fillRect(0,0,size().width,size().height);
		  */
		  
		  fixBox(g,29,49,88,122,Color.gray);
		  fixBox(g,27,47,86,120,Color.blue);
		  fixBox(g,429,49,90,122,Color.gray);
		  fixBox(g,427,47,88,120,Color.blue);

		  for (i=0;i<7;i++) {
			  for (j=0;j<5;j++) {
				  if (charData[currentCharIndex][i*5+j]>=0.5) 
					  fillBox(g,28+j*17,48+i*17,Color.green);
				  if (charData[currentCharIndex][i*5+j]<0.5)
					  fillBox(g,28+j*17,48+i*17,Color.blue);
			  }
		  }
		  
		  ///////////////////////closed
		  /*
		  for (i=0;i<5;i++) {
			  for (j=0;j<5;j++){
				  g.setFont(myfont);
				  g.setColor(Color.gray);     // The Shadows 
				  g.drawChars(chars,5*i+j,1,151+j*50,61+i*40);
				  g.setFont(myfont2);
				  outputstring=(Math.round((output[8+i*5+j]*100)))+"%";
				  g.drawString(outputstring,166+j*50,61+i*40);
				  g.setFont(myfont);
				  g.setColor(c[(int)(output[8+i*5+j]*20)]);    // The Values 
				  g.drawChars(chars,5*i+j,1,150+j*50,60+i*40);
				  g.setFont(myfont2);
				  //outputstring=output[8+i*5+j]+"%";
				  g.drawString(outputstring,165+j*50,60+i*40);
			  }
		  }
		  
		  
		  
		  g.setColor(c[(int)(output[33]*20)]);
		  g.setFont(myfont);
		  g.drawChars(chars,25,1,150,260);
		  g.setColor(Color.gray);
		  g.drawChars(chars,25,1,151,261);
		  g.setFont(myfont2);
		  outputstring=(Math.round((output[33]*100)))+"%";
		  g.setColor(c[(int)(output[33]*20)]);
		  g.drawString(outputstring,165,260);
		  g.setColor(Color.gray);
		  g.drawString(outputstring,166,261);
			
		  */
		  
		  for (i=8;i<34;i++) {
			  if (output[i]>carval) {
				  carval=output[i];
				  car = i;
			  }
		  }

		  
		  ////closed
		  /*
		  g.setColor(c[0]);
		  outputstring="recognized as : " + chars[car-8];
		  g.drawString(outputstring,200,261);
		  */
		  
		  drawBoard=false;
		  
///////////closed
		  /*
		  
		  fixBox(g,445,175,120,220,Color.gray);
		  g.setColor(Color.blue);

		  */
		  
		  
		  ///////////closed
		  /*
		  g.drawString("Network activity:",455,200);
		  for (i=0;i<35;i++){
			  //g.setColor(c[(int)charData[currentCharIndex][i]*20-1]);
			  fixBox(g,460,205+i*4,10,3,c[(int)(charData[currentCharIndex][i]*20-0.0001)]);
		  }
		  for (i=0;i<8;i++) {
			  //g.setColor(c[(int)(output[i]*20)]);
			  fixBox(g,500,210+i*10,10,3,c[(int)(output[i]*20)]);
		  }
		  for (i=0;i<25;i++) {
			  //g.setColor(c[(int)(output[i+8]*20)]);
			  fixBox(g,540,210+i*5,10,3,c[(int)(output[i+8]*20)]);
		  }

		  */
		  
	  } else {
		  if (charData[currentCharIndex][pickY*5+pickX]>=0.5) {
			  fillBox(g,28+pickX*17,48+pickY*17,Color.green);
		  }
		  if (charData[currentCharIndex][pickY*5+pickX]<0.5) {
			  fillBox(g,28+pickX*17,48+pickY*17,Color.blue);
		  }
	  }
  }	
  

}


public class CharRecognition extends Applet
{
	MenuWindow win;

	public CharRecognition()
	{
	}

	public String getAppletInfo()
	{
		return "Name: reccar\r\n" +
		       "Author: Nafisa Masud\r\n" +
		       "Created with Microsoft Visual J++ Version 1.1";
	}



	public void init() {
		//Canvas c = new Canvas();
		//c.resize(600,350);
		win = new MenuWindow();
		win.setTitle("Character recognition applet");
		win.resize(600,450);
		//win.add("Center",c);;
		
		win.initf();
		
		//win.drawBoard=true;
		//win.draw();

	}
  

	public void destroy()
	{
	}

	public void paint(Graphics g)
	{
	}

	public void start()
	{
		//win.drawBoard=true;
		//win.draw();
	}
	
	public void stop()
	{
	}



}
